# GitHub Copilot Instructions

[English](#english) | [Русский](#русский)

---
# English

## Project Structure
This is a Transmission BitTorrent client built with:
- Backend: Go + Wails v2
- Frontend: React + TypeScript
- Architecture: Clean Architecture pattern

### Key Components:
1. `internal/` - Backend implementation
   - `domain/` - Core business logic and interfaces
   - `application/` - Use cases and services
   - `infrastructure/` - External services integration

2. `frontend/` - React TypeScript UI
   - `src/components/` - React components
   - `src/contexts/` - React contexts
   - `src/hooks/` - Custom hooks
   - `src/styles/` - CSS modules

### Documentation:
- `docs/overview.md` - Project overview
- `docs/architecture.md` - Technical architecture
- `docs/installation.md` - Installation guide
- `docs/user-guide.md` - User documentation

## Common Tasks

### Adding New Features
1. For backend features:
   - Add domain entities in `internal/domain/`
   - Implement services in `internal/application/`
   - Add infrastructure code in `internal/infrastructure/`
   - Update `app.go` to expose new functionality to frontend

2. For frontend features:
   - Create components in `frontend/src/components/`
   - Add styles in `frontend/src/styles/`
   - Update App.tsx for routing/integration
   - Use hooks from `frontend/src/hooks/` for data management

### Localization
1. Add new strings to:
   - `locales/en.json` for English
   - `locales/ru.json` for Russian
2. Use the localization context in React components:
   ```typescript
   const { translate } = useLocalization();
   return <div>{translate("key.name")}</div>;
   ```

### Testing
- Backend: Add tests alongside the implementation files
- Frontend: Use React Testing Library for component tests

### Architecture Principles
- Follow Clean Architecture principles
- Keep domain layer independent of frameworks
- Use interfaces for dependency inversion
- Add localization for all user-facing strings
- Handle errors properly with localized messages

---
# Русский

## Структура проекта
Это клиент Transmission BitTorrent, построенный на:
- Backend: Go + Wails v2
- Frontend: React + TypeScript
- Архитектура: Clean Architecture

### Ключевые компоненты:
1. `internal/` - Реализация бэкенда
   - `domain/` - Основная бизнес-логика и интерфейсы
   - `application/` - Сценарии использования и сервисы
   - `infrastructure/` - Интеграция с внешними сервисами

2. `frontend/` - React TypeScript UI
   - `src/components/` - React компоненты
   - `src/contexts/` - React контексты
   - `src/hooks/` - Пользовательские хуки
   - `src/styles/` - CSS модули

### Документация:
- `docs/overview.ru.md` - Обзор проекта
- `docs/architecture.ru.md` - Техническая архитектура
- `docs/installation.ru.md` - Руководство по установке
- `docs/user-guide.ru.md` - Пользовательская документация

## Частые задачи

### Добавление новых функций
1. Для бэкенд функций:
   - Добавьте сущности домена в `internal/domain/`
   - Реализуйте сервисы в `internal/application/`
   - Добавьте инфраструктурный код в `internal/infrastructure/`
   - Обновите `app.go` для предоставления новой функциональности фронтенду

2. Для frontend функций:
   - Создайте компоненты в `frontend/src/components/`
   - Добавьте стили в `frontend/src/styles/`
   - Обновите App.tsx для маршрутизации/интеграции
   - Используйте хуки из `frontend/src/hooks/` для управления данными

### Локализация
1. Добавляйте новые строки в:
   - `locales/en.json` для английского
   - `locales/ru.json` для русского
2. Используйте контекст локализации в React компонентах:
   ```typescript
   const { translate } = useLocalization();
   return <div>{translate("key.name")}</div>;
   ```

### Тестирование
- Backend: Добавляйте тесты рядом с файлами реализации
- Frontend: Используйте React Testing Library для тестов компонентов

### Принципы архитектуры
- Следуйте принципам Чистой Архитектуры
- Сохраняйте доменный слой независимым от фреймворков
- Используйте интерфейсы для инверсии зависимостей
- Добавляйте локализацию для всех строк пользовательского интерфейса
- Правильно обрабатывайте ошибки с локализованными сообщениями

# Структура проекта Transmission Desktop Client

## Общее описание
Transmission Desktop Client — это десктопное приложение для управления торрент-клиентом Transmission, разработанное с использованием фреймворка Wails (Go + React). Приложение следует принципам Чистой Архитектуры с четким разделением на слои.

## Архитектура проекта

### Обзор технологического стека
- **Backend**: Go
- **Frontend**: React + TypeScript
- **Framework**: Wails (связывает Go и веб-интерфейс)
- **Управление торрентами**: Transmission RPC API
- **Локализация**: Мультиязычность (ru, en)
- **Темы оформления**: Светлая/Темная/Авто

### Структура проекта
```
├── app.go                 # Точка интеграции Wails (связь Go и React)
├── main.go                # Основная точка входа приложения
├── internal/              # Внутренние пакеты приложения
│   ├── domain/            # Доменная логика и основные сущности
│   ├── application/       # Бизнес-логика и use cases
│   └── infrastructure/    # Внешние сервисы и репозитории
├── frontend/              # React приложение
│   ├── src/               # Исходный код React
│   │   ├── components/    # UI компоненты
│   │   ├── contexts/      # React контексты
│   │   ├── hooks/         # Пользовательские хуки
│   │   └── styles/        # CSS модули
│   └── wailsjs/          # Сгенерированный код для интеграции с Wails
└── locales/              # Файлы локализации
```

## Слои архитектуры

### 1. Доменный слой (Domain Layer)
**Местоположение:** `internal/domain/`

Содержит основные бизнес-сущности и интерфейсы:
- `torrent.go`: Определяет модель торрента и статусы
- `config.go`: Конфигурация приложения
- `session_stats.go`: Статистика сессии Transmission
- Интерфейс `TorrentRepository` для абстракции доступа к данным

### 2. Слой приложения (Application Layer)
**Местоположение:** `internal/application/`

Реализует варианты использования приложения:
- `torrent_service.go`: Сервис для работы с торрентами
- Оркестрирует взаимодействие между доменными объектами и инфраструктурой
- Содержит бизнес-логику управления торрентами

### 3. Инфраструктурный слой (Infrastructure Layer)
**Местоположение:** `internal/infrastructure/`

Отвечает за интеграцию с внешними сервисами:
- `transmission_client.go`: Клиент для взаимодействия с Transmission RPC API
- `config_service.go`: Сервис для работы с конфигурацией приложения
- `encryption_service.go`: Шифрование чувствительных данных
- `localization_service.go`: Управление переводами

### 4. Слой представления (Presentation Layer)
**Backend часть:** `app.go`
- Экспортирует Go-методы для использования во Frontend
- Связывает бэкенд и фронтенд через Wails

**Frontend часть:** `frontend/src/`
- React-приложение с компонентным подходом
- Использует генерируемый Wails-код для вызова Go-функций

## Взаимодействие Frontend и Backend

### Механизм взаимодействия
1. **Wails Runtime Bridge**: Создаёт JavaScript-обёртки для Go-функций
2. **Генерируемый код**: Wails генерирует TypeScript интерфейсы и функции в `frontend/wailsjs/go/`
3. **Вызовы из React**: Frontend-код вызывает Go-функции через сгенерированные обёртки

### Основной поток данных
1. Пользователь взаимодействует с React-интерфейсом
2. React-код вызывает методы из `wailsjs/go/main/App.js`
3. Wails перенаправляет вызов в соответствующий метод в `app.go`
4. `app.go` делегирует выполнение в сервисный слой (`application`)
5. Сервисный слой работает с инфраструктурой и доменными моделями
6. Результаты проходят тот же путь в обратном направлении

### Ключевые API точки (app.go):
- `Initialize`: Инициализация клиента Transmission
- `GetTorrents`: Получение списка торрентов
- `AddTorrent`: Добавление торрента по URL
- `AddTorrentFile`: Добавление торрента из файла
- `RemoveTorrent`: Удаление торрента
- `StartTorrents`/`StopTorrents`: Управление статусом торрентов
- `GetSessionStats`: Получение статистики сессии
- `GetTorrentFiles`: Получение списка файлов в торренте
- `SetFilesWanted`: Управление загружаемыми файлами

## Управление состоянием во Frontend

### Пользовательские хуки:
- `useTorrentData`: Управляет загрузкой и обновлением данных о торрентах
- `useBulkOperations`: Обеспечивает массовые операции с торрентами

### React Contexts:
- `ThemeContext`: Управление темой приложения
- `LocalizationContext`: Управление локализацией

## Локализация
- Поддерживаются языки: русский и английский
- Файлы локализации: `locales/en.json`, `locales/ru.json`
- `LocalizationService` в Go обеспечивает доступ к переводам
- `LocalizationContext` в React обеспечивает доставку переводов в UI

## Темы оформления
- Темная и светлая темы реализованы через CSS-переменные
- `theme.css` содержит основные цветовые переменные
- `ThemeProvider` управляет переключением тем

## Файловые ассоциации
- Приложение поддерживает открытие .torrent файлов
- Обработка происходит через метод `handleFileOpen` в `app.go`

## Особенности архитектуры
1. **Чистая Архитектура**: Зависимости направлены внутрь, доменный слой не зависит от внешних фреймворков
2. **Разделение ответственности**: Каждый слой имеет свою четкую роль
3. **Интерфейсы репозиториев**: Абстрагируют доступ к данным
4. **Контексты React**: Управление глобальным состоянием UI
5. **Компонентный подход**: UI разбит на переиспользуемые компоненты

## Ключевые модули
1. **Transmission Client**: Взаимодействие с Transmission через RPC API
2. **Torrent Service**: Бизнес-логика для управления торрентами
3. **Localization Service**: Управление переводами
4. **Config Service**: Управление конфигурацией
5. **React Components**: UI компоненты для отображения данных