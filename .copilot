# GitHub Copilot Instructions

[English](#english) | [Русский](#русский)

---
# English

## Project Structure
This is a Transmission BitTorrent client built with:
- Backend: Go + Wails v2
- Frontend: React + TypeScript
- Architecture: Clean Architecture pattern

### Key Components:
1. `internal/` - Backend implementation
   - `domain/` - Core business entities and interfaces
     - `torrent.go` - Torrent model, statuses and repository interface
     - `config.go` - Application configuration model
     - `session_stats.go` - Transmission session statistics
   - `application/` - Services and use cases
     - `torrent_service.go` - Business logic for torrent operations
   - `infrastructure/` - External services implementation
     - `transmission_client.go` - Implementation of Transmission RPC API
     - `config_service.go` - Configuration persistence
     - `localization_service.go` - Translation service
     - `encryption_service.go` - Secure storage for credentials

2. `frontend/` - React TypeScript UI
   - `src/components/` - UI components (TorrentList, TorrentItem, etc.)
   - `src/contexts/` - React contexts (Theme, Localization)
   - `src/hooks/` - Custom hooks (useTorrentData, useBulkOperations)
   - `src/styles/` - CSS modules

3. `locales/` - Translation files
   - `en.json` - English translations
   - `ru.json` - Russian translations

### Documentation:
- `docs/overview.md` - Project overview
- `docs/architecture.md` - Technical architecture
- `docs/installation.md` - Installation guide
- `docs/user-guide.md` - User documentation

## Key Features

- Torrent management (add, remove, start, stop)
- File selection within torrents
- Speed control with configurable throttling
- Upload ratio limitation
- Theme switching (light/dark/auto)
- Full localization (English, Russian)
- macOS native integration

## Common Tasks

### Adding New Features
1. For backend features:
   - Add domain entities in `internal/domain/`
   - Implement services in `internal/application/`
   - Add infrastructure code in `internal/infrastructure/`
   - Update `app.go` to expose new functionality to frontend

2. For frontend features:
   - Create components in `frontend/src/components/`
   - Add styles in `frontend/src/styles/`
   - Update App.tsx for integration
   - Use hooks and contexts for state management

### Localization
1. Add new strings to:
   - `locales/en.json` for English
   - `locales/ru.json` for Russian
2. Use the localization context in React components:
   ```typescript
   const { translate } = useLocalization();
   return <div>{translate("key.name")}</div>;
   ```

### Architecture Principles
- Follow Clean Architecture principles
- Keep domain layer independent of frameworks
- Use interfaces for dependency inversion
- Add localization for all user-facing strings
- Handle errors properly with localized messages

---
# Русский

## Структура проекта
Это клиент Transmission BitTorrent, построенный на:
- Backend: Go + Wails v2
- Frontend: React + TypeScript
- Архитектура: Clean Architecture

### Ключевые компоненты:
1. `internal/` - Реализация бэкенда
   - `domain/` - Основные бизнес-сущности и интерфейсы
     - `torrent.go` - Модель торрента, статусы и интерфейс репозитория
     - `config.go` - Модель конфигурации приложения
     - `session_stats.go` - Статистика сессии Transmission
   - `application/` - Сервисы и варианты использования
     - `torrent_service.go` - Бизнес-логика для операций с торрентами
   - `infrastructure/` - Реализация внешних сервисов
     - `transmission_client.go` - Реализация Transmission RPC API
     - `config_service.go` - Хранение конфигурации
     - `localization_service.go` - Сервис переводов
     - `encryption_service.go` - Безопасное хранение учетных данных

2. `frontend/` - React TypeScript UI
   - `src/components/` - UI компоненты (TorrentList, TorrentItem и др.)
   - `src/contexts/` - React контексты (Theme, Localization)
   - `src/hooks/` - Пользовательские хуки (useTorrentData, useBulkOperations)
   - `src/styles/` - CSS модули

3. `locales/` - Файлы переводов
   - `en.json` - Английские переводы
   - `ru.json` - Русские переводы

### Документация:
- `docs/overview.ru.md` - Обзор проекта
- `docs/architecture.ru.md` - Техническая архитектура
- `docs/installation.ru.md` - Руководство по установке
- `docs/user-guide.ru.md` - Пользовательская документация

## Основные возможности

- Управление торрентами (добавление, удаление, запуск, остановка)
- Выбор файлов внутри торрентов
- Управление скоростью с настраиваемым ограничением
- Ограничение рейтинга отдачи
- Переключение тем (светлая/темная/авто)
- Полная локализация (английский, русский)
- Нативная интеграция с macOS

## Частые задачи

### Добавление новых функций
1. Для бэкенд функций:
   - Добавьте сущности домена в `internal/domain/`
   - Реализуйте сервисы в `internal/application/`
   - Добавьте инфраструктурный код в `internal/infrastructure/`
   - Обновите `app.go` для предоставления новой функциональности фронтенду

2. Для frontend функций:
   - Создайте компоненты в `frontend/src/components/`
   - Добавьте стили в `frontend/src/styles/`
   - Обновите App.tsx для интеграции
   - Используйте хуки и контексты для управления состоянием

### Локализация
1. Добавляйте новые строки в:
   - `locales/en.json` для английского
   - `locales/ru.json` для русского
2. Используйте контекст локализации в React компонентах:
   ```typescript
   const { translate } = useLocalization();
   return <div>{translate("key.name")}</div>;
   ```

### Принципы архитектуры
- Следуйте принципам Чистой Архитектуры
- Сохраняйте доменный слой независимым от фреймворков
- Используйте интерфейсы для инверсии зависимостей
- Добавляйте локализацию для всех строк пользовательского интерфейса
- Правильно обрабатывайте ошибки с локализованными сообщениями